#pragma once

#define DEFAULT_FONT "LcdSolid.ttf"

#include "Graphics.h"
#include "Vector2D.h"

/*
 *	Creates a texture containing providing text/font information and renders it to the
 *  screen. Can be locked into a certain position or render relative to the game world.
 * 
 *  Uses Latin1 rendering for now, no need for much else.
 */
class Text
{

private:

	std::string text;					// Raw Text to display.
	std::string fontName;				// File name of currently opened font.

	SDL_Texture* textTexture;			// Texture created from current text information.
	TTF_Font* font;						// Controls font type and letter size
	Vector2D* textureSize;				// Normal size of the currently loaded texture.
	Vector2D* scaleFactor;				// Amount to scale the texture that will be rendered.
	SDL_FRect destRect;					// Controls render position and size.
	SDL_Color textColor;				// Controls foreground color and alpha channel of text.
	
	int lineWidth;						// TTF Pixels until line will wrap to a new line.
	int fontSize;						// TTF Font Size.

public:


	Text(const char* fontFileName, const char* text, const Vector2D& pos = Vector2D(0, 0),
		const SDL_Color& fgCol = SDL_COLOR_SOLID_WHITE, const int& fontSize = 12, const int& lineWidth = 500);

	~Text();

	/*
	 *	Sets the text of the current text object.
	 * 
	 *  Calling this will rebuild the rendered texture, so do not
	 *  use too much or too often
	 */
	void UpdateText(const char* newText);

	/*
	 *	Move the position of the text by the given offset 
	 */
	void MoveText(const Vector2D& offset);

	/*
	 *	Renders the text to the screen, using a texture generated from the 
	 *  TTF texture in order to utilize SDL Rendering functions.
	 * 
	 *  If the given camera SDL_Rect is null, the text will render in screen space.
	 */
	void RenderText(const SDL_Rect* camera = nullptr, const double& angle = 0.0, const SDL_Point* pivot = nullptr);
	
	/*
	 *	Calls render text twice, not pivot or angle. Casts a black copy
	 *  under the original texture.
	 */
	void RenderWithShadow(const SDL_Rect* camera = nullptr, const Vector2D& customOffset = Vector2D(0, 0));

	/*
	 *	Creates a texture from the surface generated by TTF_RenderText_Blended_Wrapped.
	 *	Pass scale in here 
	 */
	void BuildTexture();

	/*
	 *	Directly set position of text's destination rect.
	 */
	void Set_Position(const Vector2D& pos);

	/*
	 *	Offsets the text's position is moved has if the top left of it
	 *  is the center (subtracts textureWidht / 2 and textureHeight / 2).
	 */
	void Set_CornerAsCenter();

	/*
	 *	Set font of this object to a new font file.
	 * 
	 *  Calling this will close the previous font and rebuild the
	 *  corresponding texture.
	 */
	void Set_Font(const char* fontFileName);

	/*
	 *	Set size of the font of this object, opening a new font file to do so.
	 *
	 *  Calling this will close the previous font and rebuild the
	 *  corresponding texture.
	 */
	void Set_FontSize(const int& size);

	/*
	 *	Set the scale of the actual destination rect for the text. The size
	 *  of the texture depends of font size, so pass in a muliplier for the
	 *  text size (i.e. scale of (1.0, 1.0) is the normal size);
	 */
	void Set_TextSize(const Vector2D& scaleFactor);

	/*
	 *	Set the color of the texture. This can be safely used to change the text
	 *  color at runtime, as it modifies the texture that will be rendered rather
	 *  than the actual font object.
	 * 
	 *  The given color's alpha channel WILL also effect the text! Use
	 *  a value of 255 to make it fully visible.
	 */
	void Set_ForegroundColor(const SDL_Color& fgCol);

	SDL_Color Get_Color();

	Vector2D Get_Position();
	Vector2D Get_Size();
};

/*
 *	Helper struct for any objects that want to spawn temporary text components.
 */
struct TimedText
{
	bool shadow;

	float lifetime;
	float timeRemaining;
	Vector2D velocity;

	Text* spawnText;
	SDL_Color currentColor;

	TimedText(const char* text, const Vector2D& startPos, const Vector2D& velocity,
		float lifetime = 1.0f, SDL_Color textColor = SDL_COLOR_SOLID_WHITE)
	{
		this->lifetime = lifetime;
		this->timeRemaining = lifetime;
		this->velocity = velocity;
		this->shadow = true;

		currentColor = textColor;

		// Make text with default font for now, it's the only font I imported!
		spawnText = new Text(DEFAULT_FONT, text, startPos, currentColor, 32);
	}
	~TimedText()
	{
		delete spawnText;
	}

	void Update(float timestep)
	{
		timeRemaining -= timestep;
		
		spawnText->Set_ForegroundColor(currentColor);
		spawnText->MoveText(velocity * timestep);
	}

	void Render(SDL_Rect* camera)
	{
		if ((timeRemaining / lifetime) < 0.0f) return;
		if (!shadow)
			spawnText->RenderText(camera);
		else
			spawnText->RenderWithShadow(camera);
	}

};